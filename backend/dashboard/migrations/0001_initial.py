# Generated by Django 4.2.4 on 2024-10-08 16:22

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Configurations',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_to_review', models.DateField(default='2024-09-08')),
            ],
        ),
        migrations.CreateModel(
            name='Stencil',
            fields=[
                ('stencil_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('site_id', models.CharField(blank=True, max_length=10, null=True)),
                ('stencil_part_nbr', models.CharField(blank=True, max_length=50, null=True)),
                ('vendor_part_nbr', models.CharField(blank=True, max_length=50, null=True)),
                ('vendor', models.CharField(max_length=50)),
                ('mfg_date', models.DateTimeField(null=True)),
                ('product_type', models.CharField(blank=True, max_length=10, null=True)),
                ('thickness', models.CharField(max_length=10)),
                ('pcb_up_nbr', models.IntegerField()),
                ('location', models.CharField(max_length=10, null=True)),
                ('status', models.CharField(max_length=10)),
                ('life_limit', models.IntegerField()),
                ('counter', models.IntegerField()),
                ('trigger_err_limit', models.IntegerField()),
                ('reg_date_time', models.DateTimeField(blank=True, null=True)),
                ('reg_user_id', models.CharField(blank=True, max_length=10, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('update_user_id', models.CharField(blank=True, max_length=10, null=True)),
                ('datetime', models.DateTimeField(blank=True, null=True)),
                ('revision', models.CharField(blank=True, max_length=10, null=True)),
                ('side', models.CharField(blank=True, max_length=10, null=True)),
                ('label_info', models.TextField(blank=True, null=True)),
                ('is_active_in_use', models.BooleanField()),
                ('stencil_destination', models.CharField(max_length=100)),
                ('p1_value', models.FloatField()),
                ('p2_value', models.FloatField()),
                ('p3_value', models.FloatField()),
                ('p4_value', models.FloatField()),
                ('is_blocked_stencil', models.BooleanField()),
                ('index_of_suggested_stencil', models.IntegerField()),
                ('object_status', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StencilType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('npi', models.CharField(max_length=50)),
                ('replica', models.BooleanField(default=False)),
                ('revision', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='StencilTensionValues',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('p1', models.FloatField()),
                ('p2', models.FloatField()),
                ('p3', models.FloatField()),
                ('p4', models.FloatField()),
                ('start_of_specific_range', models.FloatField()),
                ('end_of_specific_range', models.FloatField()),
                ('measurement_datetime', models.DateTimeField()),
                ('description', models.CharField(max_length=200)),
                ('is_registration_measurement', models.BooleanField()),
                ('is_approved_status', models.BooleanField()),
                ('cicles', models.FloatField(null=True)),
                ('stencil_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='dashboard.stencil')),
            ],
        ),
        migrations.CreateModel(
            name='ProcessedImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_path', models.CharField(max_length=255)),
                ('scratch_count', models.IntegerField()),
                ('p1', models.FloatField(default=0, null=True)),
                ('p2', models.FloatField(default=0, null=True)),
                ('p3', models.FloatField(default=0, null=True)),
                ('p4', models.FloatField(default=0, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('stencil', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='dashboard.stencil')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('first_name', models.TextField(default=None)),
                ('last_name', models.TextField(default=None)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
